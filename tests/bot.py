import discord
from discord.ext import tasks, commands
from discord import Activity, ActivityType
import asyncio
import datetime
import random

###################################################### CONFIGURA√á√ÉO DO BOT ######################################################
TOKEN = 'MTIzNTI0NTczNTg2NDMwNzc0Mw.GlsaFw.qtKc0z7FMAS17-hGLi5KITzXsgobafeHJIhM6U'
CHANNEL_ID = 695641544962736149
intents = discord.Intents.all()
intents.members = True
intents.messages = True
bot = commands.Bot(command_prefix='&', intents=intents)
################################################################################################################################

###################################################### MENSAGENS MOTIVACIONAIS ##################################################
mensagens_motivacionais = [
    "Acredite em voc√™ mesmo e nunca desista dos seus sonhos!",
    "O segredo do sucesso √© a persist√™ncia.",
    "Cada novo amanhecer √© uma nova chance para realizar seus sonhos.",
    "Quando todos avan√ßam juntos, o sucesso ocorre por si s√≥.",
    "Individualmente, somos apenas uma gota. Juntos, somos um oceano.",
    "Nos dias de hoje, a chave para uma lideran√ßa de sucesso √© a influ√™ncia, n√£o a autoridade.",
    "O √∫nico limite para a nossa compreens√£o do amanh√£ ser√£o as nossas d√∫vidas de hoje.",
    "Trabalho em equipe √© o segredo que faz pessoas comuns alcan√ßarem resultados incomuns.",
    "A nossa maior fraqueza consiste em desistir. O caminho mais seguro para o sucesso √© sempre tentar mais uma vez.",
    "O fracasso √© um sentimento que surge muito antes de se converter num resultado real. √â uma vulnerabilidade que cresce primeiro com a d√∫vida sobre si mesmo e depois, √†s vezes deliberadamente, com o medo.",
    "N√£o tenho medo das tempestades, pois elas me ensinam a navegar.",
    "A maneira mais eficaz de fazer alguma coisa √© faz√™‚Äìla.",
    "Se quer ir r√°pido, v√° sozinho. Se quer ir longe, v√° em grupo.",
    "N√≥s temos que aprender a viver juntos como irm√£os ou pereceremos juntos como tolos.",
    "√â imposs√≠vel para um homem aprender aquilo que ele acha que j√° sabe.",
    "O talento vence jogos, mas s√≥ o trabalho em equipe ganha campeonatos.",
    "Crie a melhor, a mais grandiosa vis√£o poss√≠vel para sua vida, porque voc√™ se torna aquilo no que voc√™ acredita.",
    "N√≥s escolhemos a esperan√ßa em vez do medo. N√≥s vemos o futuro n√£o como algo fora de controle, mas como algo que podemos moldar para melhor por meio de um esfor√ßo combinado e coletivo.",
    "N√£o h√° regra sem exce√ß√£o.",
    "A gargalhada √© o sol que varre o inverno do rosto humano.",
    "O sucesso nasce do querer, da determina√ß√£o e persist√™ncia em se chegar a um objetivo. Mesmo n√£o atingindo o alvo, quem busca e vence obst√°culos, no m√≠nimo far√° coisas admir√°veis.",
    "Veja tudo, de v√°rios √¢ngulos, e sinta. N√£o sossegue nunca o olho, siga o exemplo do rio que est√° sempre indo e, mesmo parado, vai mudando.",
    "Se percebemos que a vida realmente tem um sentido, percebemos tamb√©m que somos √∫teis uns aos outros. Ser humano √© trabalhar por algo al√©m de si mesmo.",
    "O √∫nico homem que est√° isento de erros √© aquele que n√£o arrisca acertar.",
    "A vit√≥ria sempre √© poss√≠vel para a pessoa que se recusa a parar de lutar.",
    "Prefiro divertir as pessoas na esperan√ßa de que aprendam do que ensin√°‚Äìlas na esperan√ßa de que se divirtam.",
    "Hoje, o -eu n√£o sei-, se tornou o -eu ainda n√£o sei-.",
    "Se quisermos alcan√ßar resultados nunca antes alcan√ßados, devemos empregar m√©todos nunca antes testados.",
    "Me ensinaram que o caminho do progresso n√£o era r√°pido nem f√°cil.",
    "Aprendi que coragem n√£o √© a aus√™ncia de medo, mas o triunfo sobre ele. O homem corajoso n√£o √© aquele que n√£o sente medo, mas o que conquista esse medo.",
    "Por vezes sentimos que aquilo que fazemos n√£o √©, sen√£o, uma gota de √°gua no mar, mas o mar seria menor se lhe faltasse uma gota.",
    "A diferen√ßa de ganhar e perder, na maioria das vezes, √© n√£o desistir",
    "Nunca se compare com ningu√©m neste mundo. Caso o fa√ßa, entenda que voc√™ estar√° insultando a si mesmo.",
    "Finja que todas as pessoas que voc√™ conhece est√£o andando por a√≠ com uma placa no pesco√ßo que diz: fa√ßa eu me sentir importante. Voc√™ ter√° muito sucesso, n√£o somente em vendas, mas na vida.",
    "Muitas pessoas pensam que vender √© o mesmo que falar, mas os vendedores mais eficazes sabem que ouvir √© a parte mais importante do seu trabalho.",
    "Pessoas extraordin√°rias t√™m uma coisa em comum: um senso incr√≠vel de objetivo.",
    "Sucesso √© a combina√ß√£o de fracassos, erros, come√ßos errados, confus√£o e da determina√ß√£o de continuar tentando mesmo assim.",
    "Hoje √© sempre o dia mais produtivo da semana."
]
################################################################################################################################

###################################################### COMANDOS DO BOT ##########################################################
@bot.event
async def on_member_join(member):
    channel_id = 695624230762709052  # Substitua pelo ID do seu canal
    channel = member.guild.get_channel(channel_id)
    if channel is not None:
        await channel.send(f"Bem-vindo(a) {member.mention} ao servidor! Esperamos que voc√™ se sinta em casa.")

@bot.command()
async def cambio(ctx):
    await ctx.send("Estou online! C√¢mbio desligo!")
################################################################################################################################

###################################################### STATUS DE ATIVIDADE ######################################################
bot.activity = Activity(type=ActivityType.watching, name="VR Training")
################################################################################################################################

###################################################### FUN√á√ïES DE DISPONIBILIDADE ################################################

################################################  ANYDESK  ##################################################

################################################  SEFAZ  ####################################################

################################################################################################################################

############################################### MENSAGENS PROGRAMADAS ##########################################################
async def enviar_mensagem_de_bom_dia():
    channel = bot.get_channel(CHANNEL_ID)
    mensagem = "Bom dia, @everyone!\n\n Lembrem-se de bater o ponto, a Camila agradece üòò\n\n A frase do dia √©: \n" + random.choice(mensagens_motivacionais)
    await channel.send(mensagem)

async def enviar_mensagem_de_boa_noite():
    channel = bot.get_channel(CHANNEL_ID)
    await channel.send("Boa noite, @everyone!\n\nTenham uma √≥tima noite!\nObrigado pelo apoio de hoje, conto com voc√™s amanh√£!\n\nAh, n√£o v√£o esquecer de bater o ponto! üëã\n\n")

async def enviar_mensagem_de_fim_expediente():
    channel = bot.get_channel(CHANNEL_ID)
    await channel.send("Boa Dia, @everyone!\n\nTenham um √≥timo final de semana!\nObrigado pelo apoio de hoje, conto com voc√™s na segunda!\n\nAh, n√£o v√£o esquecer de bater o ponto! üëã\n\n")

async def mensagem_programada(loop_func, check_func, interval):
    while True:
        now = datetime.datetime.now()
        if check_func(now):
            await loop_func()
            await asyncio.sleep(interval)
        else:
            await asyncio.sleep(60)  # Verifica a cada minuto

async def mensagem_de_bom_dia_agendada():
    await mensagem_programada(
        enviar_mensagem_de_bom_dia,
        lambda now: now.weekday() < 5 and now.hour == 20 and now.minute == 4,
        24 * 60 * 60  # 24 horas
    )

async def mensagem_de_boa_noite_agendada():
    await mensagem_programada(
        enviar_mensagem_de_boa_noite,
        lambda now: now.weekday() <= 4 and now.hour == 17 and now.minute == 57,
        24 * 60 * 60  # 24 horas
    )

async def mensagem_de_fim_expediente_agendada():
    await mensagem_programada(
        enviar_mensagem_de_fim_expediente,
        lambda now: now.weekday() == 5 and now.hour == 11 and now.minute == 57,
        24 * 60 * 60  # 24 horas
    )
################################################################################################################################

############################################### MENSAGENS PLANTONISTA ##########################################################
plantonistas = {
    0: "Adriel Sousa",
    1: "Rodolfo Joaquim",
    2: "Adriel Sousa",
    3: "Rodolfo Joaquim",
    4: "Ronald Lopes",
    5: "Adriel Sousa"
}

async def enviar_mensagem_plantonista():
    now = datetime.datetime.now()
    dia_da_semana = now.weekday()
    if dia_da_semana in plantonistas:
        channel = bot.get_channel(CHANNEL_ID)
        mensagem = (
            f"Boa tarde @everyone, tudo bem?\n\n O nosso plantonista hoje √© o {plantonistas[dia_da_semana]}!\n"
            f"Prepare-se para sua sa√≠da e retorne as {('12:00' if dia_da_semana == 5 else '18:00')} para o seu plant√£o!\n"
            "Bom plant√£o meu lindo!\n\n"
        )
        await channel.send(mensagem)

async def mensagem_plantonista_agendada():
    await mensagem_programada(
        enviar_mensagem_plantonista,
        lambda now: now.weekday() < 5 and now.hour == 17 and now.minute == 50 or now.weekday() == 5 and now.hour == 11 and now.minute == 57,
        24 * 60 * 60  # 24 horas
    )
################################################################################################################################

################################################ EVENTOS DE INICIALIZA√á√ÉO ######################################################

@bot.event
async def on_ready():
    if not hasattr(bot, 'already_ready'):
        bot.already_ready = True
        print(f'Conectado como {bot.user}')
        bot.loop.create_task(mensagem_de_bom_dia_agendada())
        bot.loop.create_task(mensagem_de_boa_noite_agendada())
        bot.loop.create_task(mensagem_de_fim_expediente_agendada())
        bot.loop.create_task(mensagem_plantonista_agendada())

# @bot.event
# async def on_ready():
#     print(f'Conectado como {bot.user}')
#     bot.loop.create_task(mensagem_de_bom_dia_agendada())
#     bot.loop.create_task(mensagem_de_boa_noite_agendada())
#     bot.loop.create_task(mensagem_de_fim_expediente_agendada())
#     bot.loop.create_task(mensagem_plantonista_agendada())
################################################################################################################################

######################################################### RODAR O BOT ##########################################################
bot.run(TOKEN)
################################################################################################################################